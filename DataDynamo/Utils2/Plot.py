import matplotlib.dates as mdates
import matplotlib.pyplot as plt
from matplotlib.font_manager import FontProperties

plt.style.reload_library()
plt.style.use('grid')
plt.rcParams['font.family'] = 'sans-serif'


def plot_historical_forecast(df, 
                            forecast,
                            target_col,
                            time_col,
                            title = None,
                            lower_percentile = None,
                            higher_percentile = None,
                            output_Path = '/home/lsmo/Desktop/Files/1st Year/Papers/1st paper/Figures',
                            output_Name = None
) -> None:
    """
    Plot the historical forecast generated by ModelTrain_Chronos.py.
    
    Parameters
    ----------
    df : pd.DataFrame
        The historical data that is the ground truth.
    forecast : pd.DataFrame
        The forecasted data.
    target_col : str
        The target column in the data.
    time_col : str
        The time column in the data.
    title : str, optional
        The title of the plot, by default None
    lower_percentile : pd.DataFrame, optional
        The lower percentile of the forecast, by default None
    higher_percentile : pd.DataFrame, optional
        The higher percentile of the forecast, by default None
    output_Path : str, optional
        The path where the output will be saved, by default '/home/lsmo/Desktop/Files/1st Year/Papers/1st paper/Figures'
    output_Name : str, optional
        The name of the output file, by default None. If None, the plot will be shown and not saved.
        
    Returns
    -------
    None
    """

    plt.figure(figsize=(7, 3))

    plt.plot(df[target_col].index, df[target_col].values, label='Actual', color='black', lw=0.8)
    
    if forecast is not None:
        plt.plot(forecast[target_col].index, forecast[target_col].values, label='Forecast', color='blue', lw=0.7)

    if lower_percentile is not None and higher_percentile is not None:
        plt.fill_between(forecast[target_col].index,
                        lower_percentile, 
                        higher_percentile,
                        color='blue', 
                        alpha=0.2)
    
    '''Plot Information and decoration'''
    # =============================================================================
    # Setting the font properties
    fpLegend = '/home/lsmo/.local/share/fonts/calibri-regular.ttf'
    fpLegendtitle = '/home/lsmo/.local/share/fonts/coolvetica rg.otf'
    fpTitle = '/home/lsmo/.local/share/fonts/coolvetica rg.otf'
    fpLabel = '/home/lsmo/.local/share/fonts/Philosopher-Bold.ttf'
    fpTicks = '/home/lsmo/.local/share/fonts/Philosopher-Regular.ttf'

    fLegend = FontProperties(fname=fpLegend)
    fLegendtitle = FontProperties(fname=fpLegendtitle)
    fTitle = FontProperties(fname=fpTitle)
    fLabel = FontProperties(fname=fpLabel)
    fTicks = FontProperties( fname=fpTicks)

    # =============================================================================
    # Add labels and title and ticks
    plt.ylabel(r'Emissions $[\mathrm{mg/nm^3}]$', fontproperties = fLabel)
    plt.xlabel('Time', fontproperties = fLabel)

    if title is not None:
        plt.title(title, fontproperties = fTitle)

    for label in (plt.gca().get_xticklabels() + plt.gca().get_yticklabels()):
        label.set_fontproperties(fTicks)

    # =============================================================================
    # Add a frame around the plot area
    plt.gca().spines['top'].set_visible(True)
    plt.gca().spines['right'].set_visible(True)
    plt.gca().spines['bottom'].set_visible(True)
    plt.gca().spines['left'].set_visible(True)

    # =============================================================================
    # Add a legend
    legend = plt.legend(prop = fLegend)

    # =============================================================================
    # Set the date format
    date_format = mdates.DateFormatter('%b-%d')
    plt.gca().xaxis.set_major_formatter(date_format)

    # =============================================================================
    # Adjust font size for tick labels
    plt.xticks(rotation='vertical', fontproperties = fTicks)
    plt.yticks(fontproperties = fTicks)
    # =============================================================================

    plt.tight_layout()

    if output_Name is not None:
        plt.savefig(output_Path + '/' + output_Name + '.pdf', bbox_inches='tight')

    plt.show()

    return None


def make_error_plot(time,
                    error,
                    title=None,
                    output_Path='/home/lsmo/Desktop/Files/1st Year/Papers/1st paper/Figures',
                    output_Name=None,
                    error_type='Mean Absolute Error [MAE]',
                    log_scale=False
) -> None:
    """
    Plot the Mean Absolute Error (MAE) over time.
    
    Parameters
    ----------
    time : list or array-like
        The time values.
    error : list or array-like
        The MAE values.
    title : str, optional
        The title of the plot, by default None. When None, no title is added.
    output_Path : str, optional
        The path where the output will be saved, by default '/home/lsmo/Desktop/Files/1st Year/Papers/1st paper/Figures'
    output_Name : str, optional
        The name of the output file, by default None. If None, the plot will be shown and not saved.
    error_type : str, optional
        The type of error, by default 'Mean Absolute Error [MAE]'.
    log_scale : bool, optional
        Whether to plot the MAE in log scale, by default False.
        
    Returns
    -------
    None
    """
    plt.figure(figsize=(7, 3))
    plt.plot(time, error, label=error_type, color='red', lw=0.8)
    
    if log_scale:
        ax = plt.gca()
        ax.set_xscale('log')
    
    '''Plot Information and decoration'''
    plt.rcParams['font.family'] = 'sans-serif'

    fpLegend = '/home/lsmo/.local/share/fonts/calibri-regular.ttf'
    fpLegendtitle = '/home/lsmo/.local/share/fonts/coolvetica rg.otf'
    fpTitle = '/home/lsmo/.local/share/fonts/coolvetica rg.otf'
    fpLabel = '/home/lsmo/.local/share/fonts/Philosopher-Bold.ttf'
    fpTicks = '/home/lsmo/.local/share/fonts/Philosopher-Regular.ttf'

    fLegend = FontProperties(fname=fpLegend)
    fLegendtitle = FontProperties(fname=fpLegendtitle)
    fTitle = FontProperties(fname=fpTitle)
    fLabel = FontProperties(fname=fpLabel)
    fTicks = FontProperties( fname=fpTicks)
    # Add labels and title and ticks
    plt.ylabel('Mean Absolute Error [MAE]', fontproperties=fLabel)
    plt.xlabel('Time', fontproperties=fLabel)

    if title is not None:
        plt.title(title, fontproperties=fTitle)


    for label in (plt.gca().get_xticklabels() + plt.gca().get_yticklabels()):
        label.set_fontproperties(fTicks)
    
    # Add a frame around the plot area
    plt.gca().spines['top'].set_visible(True)
    plt.gca().spines['right'].set_visible(True)
    plt.gca().spines['bottom'].set_visible(True)
    plt.gca().spines['left'].set_visible(True)
    
    # Add a legend
    legend = plt.legend(prop=fLegend)
    legend.set_title('Legend', prop=fLegendtitle)
    
    # Adjust font size for tick labels
    plt.xticks(rotation='vertical', fontproperties=fTicks)
    plt.yticks(fontproperties=fTicks)
    
    plt.tight_layout()
    
    if output_Name is not None:
        plt.savefig(output_Path + '/' + output_Name + '.pdf', bbox_inches='tight')
    
    plt.show()
    
    return None
