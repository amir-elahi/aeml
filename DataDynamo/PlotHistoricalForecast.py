import pandas as pd 
import numpy as np
from darts import TimeSeries
from darts.models import RegressionModel, LightGBMModel
from darts.metrics import mape, mae, ope, mase
from sklearn.linear_model import BayesianRidge
from aeml.models.gbdt.gbmquantile import LightGBMQuantileRegressor
from aeml.models.gbdt.run import run_ci_model, run_model
from aeml.models.gbdt.settings import *
from aeml.models.gbdt.plot import make_forecast_plot


from darts.dataprocessing.transformers import Scaler
import joblib, pickle, subprocess


from chronos import ChronosPipeline
import torch
from transformers import set_seed
from datetime import datetime
import os


import sys
sys.path.insert(0, '/home/lsmo/Desktop/aeml_project/aeml/DataDynamo/Utils2/')
from Plot import plot_historical_forecast

"""
# =============================================================================
Script Name: PlotHistoricalForecast.py
Author(s) <Abrevation>: Amir Elahi <AE>
Date: 8 April 2022

TL;DR:
    This script is used to plot the output pickle files generated by ModelTrain_Chronos.py.

Description:
    < >.

Usage:
    Plot the historical forecast generated by ModelTrain_Chronos.py.

Dependencies:
    Refer to the *.yml file based on your operating system.

Notes:
    < >.

#TODO:
    < >.

Version History:
    <Date>, <Author>, <Description of Changes>
    6  April 2022 AE Add the historical forecast and averaging of the data using Chronos model.
    8  April 2022 AE Configure the plotting and saving of the output. Adding flags to make it easier to use.
    14 April 2022 AE Add the MAE calculation and plotting.
    17 April 2022 AE Read the prediction_length instead of hardcoding it.
# =============================================================================
"""

# =============================================================================
# Load the data
df = pd.read_pickle('/home/lsmo/Desktop/aeml_project/aeml/DataDynamo/RawData/New_campaigns/202403 SCOPE data set dynamic campaign.pkl')

df = df.dropna()

TARGETS_clean = ['AMP-4', 'PZ-4'] 

MEAS_COLUMNS = [
     'TI-3',
     'TI-35',
     'F-11',
     'F-19',
     'T-19']


# =============================================================================
# Pickle names and paths
commit_id = '15a5f28'
date_string = '07042024_142109'
output_path = os.getcwd() + '/DataDynamo/Output/'
skip = 324

# =============================================================================
# Reading the historical forecast outputs generated by ModelTrain_Choronos.py
# Read the lists from the files
with open(output_path + f'{commit_id}_FullForecast_{date_string}_Skip{skip}.pkl', 'rb') as f:
    FullForecast_df = pickle.load(f)
with open(output_path + f'{commit_id}_FullLow_{date_string}_Skip{skip}.pkl', 'rb') as f:
    FullLow = pickle.load(f)
with open(output_path + f'{commit_id}_FullHigh_{date_string}_Skip{skip}.pkl', 'rb') as f:
    FullHigh = pickle.load(f)

FullForecast = [TimeSeries.from_dataframe(df) for df in FullForecast_df]

# =============================================================================
# Convert to TimeSeries and scale the data
y = TimeSeries.from_dataframe(df, value_cols=TARGETS_clean, time_col='Date')
x = TimeSeries.from_dataframe(df, value_cols=MEAS_COLUMNS, time_col='Date')

transformer = Scaler()
x = transformer.fit_transform(x)

y_transformer = Scaler()
y = y_transformer.fit_transform(y)

scal = y_transformer.transform(y)

# Calculate the average of the time series
average = np.mean(y_transformer.inverse_transform(y)[TARGETS_clean[0]].values())

# =============================================================================
# Some constant values for naming, saving the files and plotting
prediction_length = len(FullForecast[0])
startPoint = 0
endPoint = len(y)

# =============================================================================
# Print some useful information
print(f'Average of the whole dataset: {average}') # Print the average
print(f'Prediction length: {prediction_length}') # Print the prediction length

def average_timeseries(y, startPoint, endPoint, skip):
    averaged_values = []
    for i in range(startPoint, endPoint, skip):
        avg = sum(y.values()[i:i+skip]) / skip
        averaged_values.append(avg)
    return averaged_values

Ts3 = average_timeseries(y, startPoint, endPoint, skip)
Ts3 = TimeSeries.from_times_and_values(times = y[startPoint:endPoint:skip].time_index, values = Ts3)
Ts3 = Ts3.pd_dataframe()
Ts3.columns = y.pd_dataframe().columns
Ts3 = TimeSeries.from_dataframe(Ts3)


# =============================================================================
# Extract the prediction point from the historical forecast
# Which prediction point in histoical forecast to get and plot. from 0 to len(FullForecast[0]) - 1
prediction_point = len(FullForecast[0]) - 1
prediction_time = (prediction_point + 1) * skip * 10 / 60 # In minutes

# Extract the point of each time series
point_selected_values = [ts.values()[prediction_point] for ts in FullForecast]
point_selected_times = [ts.time_index[prediction_point] for ts in FullForecast]

# Create a new time series from the points
point_selected_ts = TimeSeries.from_times_and_values(pd.DatetimeIndex(point_selected_times), point_selected_values)

point_selected_values_Low = [array[prediction_point] for array in FullLow]
point_selected_values_High = [array[prediction_point] for array in FullHigh]

#* Inverse Transforming the series
Ts3 = y_transformer.inverse_transform(Ts3)

# =============================================================================
# Calculate the MAE for the model
mae_value = []
prediction_time_for_mae = []
for i in range(0,len(FullForecast[0])):
    ts_values_for_mae = [ts.values()[i] for ts in FullForecast]
    ts_times_for_mae = [ts.time_index[i] for ts in FullForecast]
    ts_for_mae = TimeSeries.from_times_and_values(pd.DatetimeIndex(ts_times_for_mae), ts_values_for_mae)
    prediction_time_for_mae.append((i + 1) * skip * 10 / 60 / 60) # In hours
    # mae_value.append(mae(actual_series = ts_for_mae, pred_series = FullForecast[i], intersect = True))
    mae_value.append(mae(actual_series = Ts3[TARGETS_clean[0]], pred_series = ts_for_mae, intersect = True))

mae_value = [(value / average) for value in mae_value]

'''Plotting'''
# =============================================================================
# Plot the time series

plot_historical_forecast(df = Ts3.pd_dataframe(),
                        forecast = point_selected_ts.pd_dataframe(),
                        lower_percentile = point_selected_values_Low,
                        higher_percentile = point_selected_values_High,
                        target_col = TARGETS_clean[0],
                        time_col = 'Date',
                        title = f'Historical Forecast at {prediction_time} minutes',
)                        
